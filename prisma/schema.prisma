// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model rides {
  id          Int    @unique @default(autoincrement())
  name        String
  phoneNumber String
  sessionKey  String @unique

  isLocationAvail Boolean @default(false)
  lat             String?
  lng             String?

  isCallAccepted    Boolean          @default(false)
  isCallCompleted   Boolean          @default(false)
  customerSupportId Int?
  callAcceptedBy    customerSupport? @relation(fields: [customerSupportId], references: [id])

  isRideAccepted     Boolean           @default(false)
  isRideCompleted    Boolean           @default(false)
  ambulancePartnerId Int?
  rideAcceptedBy     ambulancePartner? @relation(fields: [ambulancePartnerId], references: [id])

  address   String?
  createdAt DateTime @default(now())
}

model customerSupport {
  id          Int     @unique @default(autoincrement())
  name        String
  phoneNumber String  @unique
  email       String
  password    String
  isOnline    Boolean
  fcmToken    String?
  imageUrl    String?
  rides       rides[]
}

model ambulancePartner {
  id            Int     @unique @default(autoincrement())
  name          String
  phoneNumber   String  @unique
  email         String
  password      String
  isOnline      Boolean
  lat           String?
  lng           String?
  imageUrl      String?
  vehicleNumber String?
  fcmToken      String?
  rides         rides[]
}

model doctor {
  id             Int     @unique @default(autoincrement())
  fName          String
  lName          String
  displayName    String
  phoneNumber    String  @unique
  email          String
  password       String
  imageUrl       String?
  specialization String

  // verification details
  isVerified Boolean @default(false)
  isfeatured Boolean @default(false)

  // clinic details
  clinicName    String?
  clinicAddress String?

  // clinic location
  lat String?
  lng String?

  education     education[]
  experience    experience[]
  timings       timings[]
  paymentMethod paymentMethod?
  appointment   appointment[]
}

model education {
  id             Int    @unique @default(autoincrement())
  courseName     String
  universityName String
  yearOfPassing  Int

  doctorId Int
  doctor   doctor @relation(fields: [doctorId], references: [id])
}

model experience {
  id               Int     @unique @default(autoincrement())
  title            String
  hospital         String
  employmentType   String
  from             String
  to               String?
  currentlyWorking Boolean @default(false)
  doctorId         Int
  doctor           doctor  @relation(fields: [doctorId], references: [id])
}

model timings {
  id          Int     @unique @default(autoincrement())
  day         String
  startTime   String? @default("10:00")
  endTime     String? @default("17:00")
  isAvailable Boolean @default(true)

  fee Int? @default(0)

  doctorId Int
  doctor   doctor @relation(fields: [doctorId], references: [id])

  slots slots[]
}

model slots {
  id        Int    @unique @default(autoincrement())
  startTime String @default("10:00")
  endTime   String @default("17:00")

  timingsId Int
  timings   timings @relation(fields: [timingsId], references: [id])

  appointment appointment[]
}

model paymentMethod {
  id            Int    @unique @default(autoincrement())
  bankName      String
  accountNumber String
  ifscCode      String
  bankeeName    String
  doctorId      Int    @unique
  doctor        doctor @relation(fields: [doctorId], references: [id])
}

model user {
  id          Int    @unique @default(autoincrement())
  fname       String
  lname       String
  phoneNumber String @unique
  email       String @unique
  age         Int
  gender      Gender

  appointment appointment[]
  patient     patient[]
}

model appointment {
  id                 Int    @unique @default(autoincrement())
  patientFirstName   String
  patientLastName    String
  patientAge         Int
  patientGender      Gender
  patientPhoneNumber String @unique

  // user details
  userId   Int
  bookedBy user @relation(fields: [userId], references: [id])

  // doctor details
  doctorId Int
  doctor   doctor @relation(fields: [doctorId], references: [id])

  Mode AppointmentMode

  status Status @default(SCHEDULED)

  // payment details
  rpzOrderId String? @unique

  // timing details
  date   DateTime @default(now())
  slotId Int
  slot   slots    @relation(fields: [slotId], references: [id])

  // additional details
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // prescription details
  prescriptionUrl String?
}

model patient {
  id          Int    @unique @default(autoincrement())
  fname       String
  lname       String
  phoneNumber String @unique
  email       String @unique
  age         Int
  gender      Gender

  userId      Int
  user        user @relation(fields: [userId], references: [id])
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AppointmentMode {
  ONLINE
  IN_CLINIC
}

enum Status {
  SCHEDULED
  ACCEPTED
  REJECTED
  IN_PROGRESS
  COMPLETED
}
